===============================
 Test 100-matrix_mul.py
 ===============================

 This library is very simple, since it only has one function called
 ``def matrix_mul(m_a, m_b)``.

 Numbers
 =======

::

	>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

	>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
	[[7, 10], [15, 22]]

	>>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
	[[13, 16]]

Errors
=======
	>>> matrix_mul([1, 2], [[1, 2], [3, 4]])
	Traceback (most recent call last):
	TypeError: m_a must be a list of lists

	>>> matrix_mul(2, [[3, 4]])
	Traceback (most recent call last):
	TypeError: m_a must be a list

	>>> matrix_mul([[1, 2]], "lol")
	Traceback (most recent call last):
	TypeError: m_b must be a list

	>>> matrix_mul([[]], [[1, 2], [3, 4]])
	Traceback (most recent call last):
	TypeError: m_a can't be empty

	>>> matrix_mul([[2, 3, 5]], [[]])
	Traceback (most recent call last):
	TypeError: m_b can't be empty

	>>> matrix_mul([[2, 56, 34]], [[1, "lo"], [3, 4]])
	Traceback (most recent call last):
	TypeError: m_b should contain only integers or floats

	>>> matrix_mul([], [[1, 2], [3, 4]])
	Traceback (most recent call last):
	TypeError: m_a can't be empty

	>>> matrix_mul([[2, 4, 5]], [[1, 2], [3, 4]])
	Traceback (most recent call last):
	ValueError: m_a and m_b can't be multiplied
